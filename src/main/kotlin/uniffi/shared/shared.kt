// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.shared

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Callback
import com.sun.jna.IntegerType
import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock
import kotlin.coroutines.Continuation
import kotlin.coroutines.resume
import kotlin.coroutines.resumeWithException
import kotlin.coroutines.suspendCoroutine

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0

    @JvmField var len: Int = 0

    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue
    class ByReference : RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_shared_rustbuffer_alloc(size, status).also {
                if (it.data == null) {
                    throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=$size)")
                }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_shared_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0

    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
            val item = read(byteBuf)
            if (byteBuf.hasRemaining()) {
                throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
            }
            return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType> : FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Byte = 0

    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue : RustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E : Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus()
    val return_value = callback(status)
    checkCallStatus(errorHandler, status)
    return return_value
}

// Check RustCallStatus and throw an error if the call wasn't successful
private fun<E : Exception> checkCallStatus(errorHandler: CallStatusErrorHandler<E>, status: RustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler : CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback)
}

// IntegerType that matches Rust's `usize` / C's `size_t`
public class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer): USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}

// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T : Any> {
    private val map = ConcurrentHashMap<USize, T>()

    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize) {
        map.remove(handle)
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "shared"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String,
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "shared")
                .also { lib: _UniFFILib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                    FfiConverterForeignExecutor.register(lib)
                    FfiConverterTypeSigner.register(lib)
                }
        }
    }

    fun uniffi_shared_fn_free_smartaccount(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_shared_fn_method_smartaccount_address(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_shared_fn_method_smartaccount_app_id(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_shared_fn_method_smartaccount_chain(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): Long
    fun uniffi_shared_fn_method_smartaccount_is_deployed(
        `ptr`: Pointer,
        `uniffiExecutor`: USize,
        `uniffiCallback`: UniFfiFutureCallbackByte,
        `uniffiCallbackData`: USize,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_shared_fn_method_smartaccount_keyset_json(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_shared_fn_method_smartaccount_nonce(
        `ptr`: Pointer,
        `uniffiExecutor`: USize,
        `uniffiCallback`: UniFfiFutureCallbackLong,
        `uniffiCallbackData`: USize,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_shared_fn_method_smartaccount_send_transactions(
        `ptr`: Pointer,
        `transactions`: RustBuffer.ByValue,
        `options`: RustBuffer.ByValue,
        `uniffiExecutor`: USize,
        `uniffiCallback`: UniFfiFutureCallbackRustBuffer,
        `uniffiCallbackData`: USize,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_shared_fn_method_smartaccount_sign_hash(
        `ptr`: Pointer,
        `hash`: RustBuffer.ByValue,
        `uniffiExecutor`: USize,
        `uniffiCallback`: UniFfiFutureCallbackRustBuffer,
        `uniffiCallbackData`: USize,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_shared_fn_method_smartaccount_sign_message(
        `ptr`: Pointer,
        `message`: RustBuffer.ByValue,
        `uniffiExecutor`: USize,
        `uniffiCallback`: UniFfiFutureCallbackRustBuffer,
        `uniffiCallbackData`: USize,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_shared_fn_method_smartaccount_sign_typed_data(
        `ptr`: Pointer,
        `typedData`: RustBuffer.ByValue,
        `uniffiExecutor`: USize,
        `uniffiCallback`: UniFfiFutureCallbackRustBuffer,
        `uniffiCallbackData`: USize,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_shared_fn_method_smartaccount_simulate_transactions(
        `ptr`: Pointer,
        `transactions`: RustBuffer.ByValue,
        `simulateOptions`: RustBuffer.ByValue,
        `uniffiExecutor`: USize,
        `uniffiCallback`: UniFfiFutureCallbackRustBuffer,
        `uniffiCallbackData`: USize,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_shared_fn_method_smartaccount_switch_chain(
        `ptr`: Pointer,
        `chainId`: Long,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_shared_fn_method_smartaccount_wait_for_transaction(
        `ptr`: Pointer,
        `txHash`: RustBuffer.ByValue,
        `uniffiExecutor`: USize,
        `uniffiCallback`: UniFfiFutureCallbackRustBuffer,
        `uniffiCallbackData`: USize,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_shared_fn_free_smartaccountbuilder(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_shared_fn_constructor_smartaccountbuilder_new(
        _uniffi_out_err: RustCallStatus,
    ): Pointer
    fun uniffi_shared_fn_method_smartaccountbuilder_add_chain_option(
        `ptr`: Pointer,
        `chain`: Long,
        `rpcUrl`: RustBuffer.ByValue,
        `httpRelayerUrl`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Pointer
    fun uniffi_shared_fn_method_smartaccountbuilder_add_email_guardian_key(
        `ptr`: Pointer,
        `emailAddress`: RustBuffer.ByValue,
        `pepper`: RustBuffer.ByValue,
        `roleWeight`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Pointer
    fun uniffi_shared_fn_method_smartaccountbuilder_add_guardian_keys(
        `ptr`: Pointer,
        `keys`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Pointer
    fun uniffi_shared_fn_method_smartaccountbuilder_add_open_id_guardian_key(
        `ptr`: Pointer,
        `idToken`: RustBuffer.ByValue,
        `roleWeight`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Pointer
    fun uniffi_shared_fn_method_smartaccountbuilder_add_open_id_with_email_guardian_key(
        `ptr`: Pointer,
        `idToken`: RustBuffer.ByValue,
        `emailAddress`: RustBuffer.ByValue,
        `roleWeight`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Pointer
    fun uniffi_shared_fn_method_smartaccountbuilder_build(
        `ptr`: Pointer,
        `uniffiExecutor`: USize,
        `uniffiCallback`: UniFfiFutureCallbackPointer,
        `uniffiCallbackData`: USize,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_shared_fn_method_smartaccountbuilder_with_active_chain(
        `ptr`: Pointer,
        `activeChain`: Long,
        _uniffi_out_err: RustCallStatus,
    ): Pointer
    fun uniffi_shared_fn_method_smartaccountbuilder_with_app_id(
        `ptr`: Pointer,
        `appId`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Pointer
    fun uniffi_shared_fn_method_smartaccountbuilder_with_keyset_json(
        `ptr`: Pointer,
        `keysetJson`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Pointer
    fun uniffi_shared_fn_method_smartaccountbuilder_with_master_key(
        `ptr`: Pointer,
        `key`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Pointer
    fun uniffi_shared_fn_method_smartaccountbuilder_with_master_key_signer(
        `ptr`: Pointer,
        `signer`: Long,
        `roleWeight`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Pointer
    fun uniffi_shared_fn_method_smartaccountbuilder_with_unipass_server_url(
        `ptr`: Pointer,
        `unipassServerUrl`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Pointer
    fun uniffi_shared_fn_init_callback_signer(
        `callbackStub`: ForeignCallback,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun ffi_shared_rustbuffer_alloc(
        `size`: Int,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue
    fun ffi_shared_rustbuffer_from_bytes(
        `bytes`: ForeignBytes.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue
    fun ffi_shared_rustbuffer_free(
        `buf`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun ffi_shared_rustbuffer_reserve(
        `buf`: RustBuffer.ByValue,
        `additional`: Int,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_shared_checksum_method_smartaccount_address(): Short
    fun uniffi_shared_checksum_method_smartaccount_app_id(): Short
    fun uniffi_shared_checksum_method_smartaccount_chain(): Short
    fun uniffi_shared_checksum_method_smartaccount_is_deployed(): Short
    fun uniffi_shared_checksum_method_smartaccount_keyset_json(): Short
    fun uniffi_shared_checksum_method_smartaccount_nonce(): Short
    fun uniffi_shared_checksum_method_smartaccount_send_transactions(): Short
    fun uniffi_shared_checksum_method_smartaccount_sign_hash(): Short
    fun uniffi_shared_checksum_method_smartaccount_sign_message(): Short
    fun uniffi_shared_checksum_method_smartaccount_sign_typed_data(): Short
    fun uniffi_shared_checksum_method_smartaccount_simulate_transactions(): Short
    fun uniffi_shared_checksum_method_smartaccount_switch_chain(): Short
    fun uniffi_shared_checksum_method_smartaccount_wait_for_transaction(): Short
    fun uniffi_shared_checksum_method_smartaccountbuilder_add_chain_option(): Short
    fun uniffi_shared_checksum_method_smartaccountbuilder_add_email_guardian_key(): Short
    fun uniffi_shared_checksum_method_smartaccountbuilder_add_guardian_keys(): Short
    fun uniffi_shared_checksum_method_smartaccountbuilder_add_open_id_guardian_key(): Short
    fun uniffi_shared_checksum_method_smartaccountbuilder_add_open_id_with_email_guardian_key(): Short
    fun uniffi_shared_checksum_method_smartaccountbuilder_build(): Short
    fun uniffi_shared_checksum_method_smartaccountbuilder_with_active_chain(): Short
    fun uniffi_shared_checksum_method_smartaccountbuilder_with_app_id(): Short
    fun uniffi_shared_checksum_method_smartaccountbuilder_with_keyset_json(): Short
    fun uniffi_shared_checksum_method_smartaccountbuilder_with_master_key(): Short
    fun uniffi_shared_checksum_method_smartaccountbuilder_with_master_key_signer(): Short
    fun uniffi_shared_checksum_method_smartaccountbuilder_with_unipass_server_url(): Short
    fun uniffi_shared_checksum_constructor_smartaccountbuilder_new(): Short
    fun uniffi_shared_checksum_method_signer_address(): Short
    fun uniffi_shared_checksum_method_signer_sign_message(): Short
    fun uniffi_foreign_executor_callback_set(
        `callback`: UniFfiForeignExecutorCallback,
    ): Unit
    fun ffi_shared_uniffi_contract_version(): Int
}

private fun uniffiCheckContractApiVersion(lib: _UniFFILib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_shared_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: _UniFFILib) {
    if (lib.uniffi_shared_checksum_method_smartaccount_address() != 57724.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccount_app_id() != 8541.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccount_chain() != 31244.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccount_is_deployed() != 29375.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccount_keyset_json() != 42583.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccount_nonce() != 9274.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccount_send_transactions() != 52880.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccount_sign_hash() != 19627.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccount_sign_message() != 55038.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccount_sign_typed_data() != 20496.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccount_simulate_transactions() != 1471.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccount_switch_chain() != 38913.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccount_wait_for_transaction() != 9892.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccountbuilder_add_chain_option() != 12444.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccountbuilder_add_email_guardian_key() != 49619.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccountbuilder_add_guardian_keys() != 63158.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccountbuilder_add_open_id_guardian_key() != 44109.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccountbuilder_add_open_id_with_email_guardian_key() != 62133.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccountbuilder_build() != 58869.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccountbuilder_with_active_chain() != 10208.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccountbuilder_with_app_id() != 14169.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccountbuilder_with_keyset_json() != 31804.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccountbuilder_with_master_key() != 50082.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccountbuilder_with_master_key_signer() != 43948.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_smartaccountbuilder_with_unipass_server_url() != 30405.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_constructor_smartaccountbuilder_new() != 30481.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_signer_address() != 15807.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_shared_checksum_method_signer_sign_message() != 16910.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Public interface members begin here.

public object FfiConverterUByte : FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

public object FfiConverterUInt : FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterULong : FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterDouble : FfiConverter<Double, Double> {
    override fun lift(value: Double): Double {
        return value
    }

    override fun read(buf: ByteBuffer): Double {
        return buf.getDouble()
    }

    override fun lower(value: Double): Double {
        return value
    }

    override fun allocationSize(value: Double) = 8

    override fun write(value: Double, buf: ByteBuffer) {
        buf.putDouble(value)
    }
}

public object FfiConverterBoolean : FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString : FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}

// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer,
) : Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    protected open fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}

public interface SmartAccountInterface {

    fun `address`(): List<UByte>
    fun `appId`(): String
    fun `chain`():
        ULong@Throws(SmartAccountException::class)
    suspend fun `isDeployed`(): Boolean
    fun `keysetJson`():
        String@Throws(SmartAccountException::class)
    suspend fun `nonce`():
        ULong@Throws(SmartAccountException::class)
    suspend fun `sendTransactions`(`transactions`: List<Transaction>, `options`: SendingTransactionOptions?):
        String@Throws(SmartAccountException::class)
    suspend fun `signHash`(`hash`: List<UByte>): List<
        UByte,
        >@Throws(SmartAccountException::class)
    suspend fun `signMessage`(`message`: List<UByte>): List<
        UByte,
        >@Throws(SmartAccountException::class)
    suspend fun `signTypedData`(`typedData`: TypedData): List<
        UByte,
        >@Throws(SmartAccountException::class)
    suspend fun `simulateTransactions`(`transactions`: List<Transaction>, `simulateOptions`: SimulateTransactionOptions?):
        SimulateResult@Throws(SmartAccountException::class)
    fun `switchChain`(
        `chainId`:

        ULong,
    )@Throws(SmartAccountException::class)
    suspend fun `waitForTransaction`(`txHash`: String): TransactionReceipt?
}

class SmartAccount(
    pointer: Pointer,
) : FFIObject(pointer), SmartAccountInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    protected override fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_shared_fn_free_smartaccount(this.pointer, status)
        }
    }

    override fun `address`(): List<UByte> =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccount_address(
                    it,

                    _status,
                )
            }
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }

    override fun `appId`(): String =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccount_app_id(
                    it,

                    _status,
                )
            }
        }.let {
            FfiConverterString.lift(it)
        }

    override fun `chain`(): ULong =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccount_chain(
                    it,

                    _status,
                )
            }
        }.let {
            FfiConverterULong.lift(it)
        }

    @Throws(SmartAccountException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `isDeployed`(): Boolean {
        // Create a new `CoroutineScope` for this operation, suspend the coroutine, and call the
        // scaffolding function, passing it one of the callback handlers from `AsyncTypes.kt`.
        //
        // Make sure to retain a reference to the callback handler to ensure that it's not GCed before
        // it's invoked
        var callbackHolder: UniFfiFutureCallbackHandlerBoolean_TypeSmartAccountError? = null
        return coroutineScope {
            val scope = this
            return@coroutineScope suspendCoroutine { continuation ->
                try {
                    val callback = UniFfiFutureCallbackHandlerBoolean_TypeSmartAccountError(continuation)
                    callbackHolder = callback
                    callWithPointer { thisPtr ->
                        rustCall { status ->
                            _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccount_is_deployed(
                                thisPtr,

                                FfiConverterForeignExecutor.lower(scope),
                                callback,
                                USize(0),
                                status,
                            )
                        }
                    }
                } catch (e: Exception) {
                    continuation.resumeWithException(e)
                }
            }
        }
    }
    override fun `keysetJson`(): String =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccount_keyset_json(
                    it,

                    _status,
                )
            }
        }.let {
            FfiConverterString.lift(it)
        }

    @Throws(SmartAccountException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `nonce`(): ULong {
        // Create a new `CoroutineScope` for this operation, suspend the coroutine, and call the
        // scaffolding function, passing it one of the callback handlers from `AsyncTypes.kt`.
        //
        // Make sure to retain a reference to the callback handler to ensure that it's not GCed before
        // it's invoked
        var callbackHolder: UniFfiFutureCallbackHandlerULong_TypeSmartAccountError? = null
        return coroutineScope {
            val scope = this
            return@coroutineScope suspendCoroutine { continuation ->
                try {
                    val callback = UniFfiFutureCallbackHandlerULong_TypeSmartAccountError(continuation)
                    callbackHolder = callback
                    callWithPointer { thisPtr ->
                        rustCall { status ->
                            _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccount_nonce(
                                thisPtr,

                                FfiConverterForeignExecutor.lower(scope),
                                callback,
                                USize(0),
                                status,
                            )
                        }
                    }
                } catch (e: Exception) {
                    continuation.resumeWithException(e)
                }
            }
        }
    }

    @Throws(SmartAccountException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `sendTransactions`(`transactions`: List<Transaction>, `options`: SendingTransactionOptions?): String {
        // Create a new `CoroutineScope` for this operation, suspend the coroutine, and call the
        // scaffolding function, passing it one of the callback handlers from `AsyncTypes.kt`.
        //
        // Make sure to retain a reference to the callback handler to ensure that it's not GCed before
        // it's invoked
        var callbackHolder: UniFfiFutureCallbackHandlerString_TypeSmartAccountError? = null
        return coroutineScope {
            val scope = this
            return@coroutineScope suspendCoroutine { continuation ->
                try {
                    val callback = UniFfiFutureCallbackHandlerString_TypeSmartAccountError(continuation)
                    callbackHolder = callback
                    callWithPointer { thisPtr ->
                        rustCall { status ->
                            _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccount_send_transactions(
                                thisPtr,
                                FfiConverterSequenceTypeTransaction.lower(`transactions`),
                                FfiConverterOptionalTypeSendingTransactionOptions.lower(`options`),
                                FfiConverterForeignExecutor.lower(scope),
                                callback,
                                USize(0),
                                status,
                            )
                        }
                    }
                } catch (e: Exception) {
                    continuation.resumeWithException(e)
                }
            }
        }
    }

    @Throws(SmartAccountException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `signHash`(`hash`: List<UByte>): List<UByte> {
        // Create a new `CoroutineScope` for this operation, suspend the coroutine, and call the
        // scaffolding function, passing it one of the callback handlers from `AsyncTypes.kt`.
        //
        // Make sure to retain a reference to the callback handler to ensure that it's not GCed before
        // it's invoked
        var callbackHolder: UniFfiFutureCallbackHandlerSequenceUByte_TypeSmartAccountError? = null
        return coroutineScope {
            val scope = this
            return@coroutineScope suspendCoroutine { continuation ->
                try {
                    val callback = UniFfiFutureCallbackHandlerSequenceUByte_TypeSmartAccountError(continuation)
                    callbackHolder = callback
                    callWithPointer { thisPtr ->
                        rustCall { status ->
                            _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccount_sign_hash(
                                thisPtr,
                                FfiConverterSequenceUByte.lower(`hash`),
                                FfiConverterForeignExecutor.lower(scope),
                                callback,
                                USize(0),
                                status,
                            )
                        }
                    }
                } catch (e: Exception) {
                    continuation.resumeWithException(e)
                }
            }
        }
    }

    @Throws(SmartAccountException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `signMessage`(`message`: List<UByte>): List<UByte> {
        // Create a new `CoroutineScope` for this operation, suspend the coroutine, and call the
        // scaffolding function, passing it one of the callback handlers from `AsyncTypes.kt`.
        //
        // Make sure to retain a reference to the callback handler to ensure that it's not GCed before
        // it's invoked
        var callbackHolder: UniFfiFutureCallbackHandlerSequenceUByte_TypeSmartAccountError? = null
        return coroutineScope {
            val scope = this
            return@coroutineScope suspendCoroutine { continuation ->
                try {
                    val callback = UniFfiFutureCallbackHandlerSequenceUByte_TypeSmartAccountError(continuation)
                    callbackHolder = callback
                    callWithPointer { thisPtr ->
                        rustCall { status ->
                            _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccount_sign_message(
                                thisPtr,
                                FfiConverterSequenceUByte.lower(`message`),
                                FfiConverterForeignExecutor.lower(scope),
                                callback,
                                USize(0),
                                status,
                            )
                        }
                    }
                } catch (e: Exception) {
                    continuation.resumeWithException(e)
                }
            }
        }
    }

    @Throws(SmartAccountException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `signTypedData`(`typedData`: TypedData): List<UByte> {
        // Create a new `CoroutineScope` for this operation, suspend the coroutine, and call the
        // scaffolding function, passing it one of the callback handlers from `AsyncTypes.kt`.
        //
        // Make sure to retain a reference to the callback handler to ensure that it's not GCed before
        // it's invoked
        var callbackHolder: UniFfiFutureCallbackHandlerSequenceUByte_TypeSmartAccountError? = null
        return coroutineScope {
            val scope = this
            return@coroutineScope suspendCoroutine { continuation ->
                try {
                    val callback = UniFfiFutureCallbackHandlerSequenceUByte_TypeSmartAccountError(continuation)
                    callbackHolder = callback
                    callWithPointer { thisPtr ->
                        rustCall { status ->
                            _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccount_sign_typed_data(
                                thisPtr,
                                FfiConverterTypeTypedData.lower(`typedData`),
                                FfiConverterForeignExecutor.lower(scope),
                                callback,
                                USize(0),
                                status,
                            )
                        }
                    }
                } catch (e: Exception) {
                    continuation.resumeWithException(e)
                }
            }
        }
    }

    @Throws(SmartAccountException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `simulateTransactions`(`transactions`: List<Transaction>, `simulateOptions`: SimulateTransactionOptions?): SimulateResult {
        // Create a new `CoroutineScope` for this operation, suspend the coroutine, and call the
        // scaffolding function, passing it one of the callback handlers from `AsyncTypes.kt`.
        //
        // Make sure to retain a reference to the callback handler to ensure that it's not GCed before
        // it's invoked
        var callbackHolder: UniFfiFutureCallbackHandlerTypeSimulateResult_TypeSmartAccountError? = null
        return coroutineScope {
            val scope = this
            return@coroutineScope suspendCoroutine { continuation ->
                try {
                    val callback = UniFfiFutureCallbackHandlerTypeSimulateResult_TypeSmartAccountError(continuation)
                    callbackHolder = callback
                    callWithPointer { thisPtr ->
                        rustCall { status ->
                            _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccount_simulate_transactions(
                                thisPtr,
                                FfiConverterSequenceTypeTransaction.lower(`transactions`),
                                FfiConverterOptionalTypeSimulateTransactionOptions.lower(`simulateOptions`),
                                FfiConverterForeignExecutor.lower(scope),
                                callback,
                                USize(0),
                                status,
                            )
                        }
                    }
                } catch (e: Exception) {
                    continuation.resumeWithException(e)
                }
            }
        }
    }

    @Throws(
        SmartAccountException::class,
        )
    override fun `switchChain`(`chainId`: ULong) =
        callWithPointer {
            rustCallWithError(SmartAccountException) { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccount_switch_chain(
                    it,
                    FfiConverterULong.lower(`chainId`),
                    _status,
                )
            }
        }

    @Throws(SmartAccountException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `waitForTransaction`(`txHash`: String): TransactionReceipt? {
        // Create a new `CoroutineScope` for this operation, suspend the coroutine, and call the
        // scaffolding function, passing it one of the callback handlers from `AsyncTypes.kt`.
        //
        // Make sure to retain a reference to the callback handler to ensure that it's not GCed before
        // it's invoked
        var callbackHolder: UniFfiFutureCallbackHandlerOptionalTypeTransactionReceipt_TypeSmartAccountError? = null
        return coroutineScope {
            val scope = this
            return@coroutineScope suspendCoroutine { continuation ->
                try {
                    val callback = UniFfiFutureCallbackHandlerOptionalTypeTransactionReceipt_TypeSmartAccountError(continuation)
                    callbackHolder = callback
                    callWithPointer { thisPtr ->
                        rustCall { status ->
                            _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccount_wait_for_transaction(
                                thisPtr,
                                FfiConverterString.lower(`txHash`),
                                FfiConverterForeignExecutor.lower(scope),
                                callback,
                                USize(0),
                                status,
                            )
                        }
                    }
                } catch (e: Exception) {
                    continuation.resumeWithException(e)
                }
            }
        }
    }
}

public object FfiConverterTypeSmartAccount : FfiConverter<SmartAccount, Pointer> {
    override fun lower(value: SmartAccount): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): SmartAccount {
        return SmartAccount(value)
    }

    override fun read(buf: ByteBuffer): SmartAccount {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: SmartAccount) = 8

    override fun write(value: SmartAccount, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

public interface SmartAccountBuilderInterface {

    fun `addChainOption`(`chain`: ULong, `rpcUrl`: String, `httpRelayerUrl`: String?):
        SmartAccountBuilder@Throws(SmartAccountException::class)
    fun `addEmailGuardianKey`(`emailAddress`: String, `pepper`: String, `roleWeight`: RoleWeight):
        SmartAccountBuilder@Throws(SmartAccountException::class)
    fun `addGuardianKeys`(`keys`: List<Key>):
        SmartAccountBuilder@Throws(SmartAccountException::class)
    fun `addOpenIdGuardianKey`(`idToken`: String, `roleWeight`: RoleWeight):
        SmartAccountBuilder@Throws(SmartAccountException::class)
    fun `addOpenIdWithEmailGuardianKey`(`idToken`: String, `emailAddress`: String, `roleWeight`: RoleWeight):
        SmartAccountBuilder@Throws(SmartAccountException::class)
    suspend fun `build`(): SmartAccount
    fun `withActiveChain`(`activeChain`: ULong): SmartAccountBuilder
    fun `withAppId`(`appId`: String):
        SmartAccountBuilder@Throws(SmartAccountException::class)
    fun `withKeysetJson`(`keysetJson`: String):
        SmartAccountBuilder@Throws(SmartAccountException::class)
    fun `withMasterKey`(`key`: Key): SmartAccountBuilder
    fun `withMasterKeySigner`(`signer`: Signer, `roleWeight`: RoleWeight?): SmartAccountBuilder
    fun `withUnipassServerUrl`(`unipassServerUrl`: String): SmartAccountBuilder
}

class SmartAccountBuilder(
    pointer: Pointer,
) : FFIObject(pointer), SmartAccountBuilderInterface {
    constructor() :
        this(
            rustCall() { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_constructor_smartaccountbuilder_new(_status)
            },
        )

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    protected override fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_shared_fn_free_smartaccountbuilder(this.pointer, status)
        }
    }

    override fun `addChainOption`(`chain`: ULong, `rpcUrl`: String, `httpRelayerUrl`: String?): SmartAccountBuilder =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccountbuilder_add_chain_option(
                    it,
                    FfiConverterULong.lower(`chain`),
                    FfiConverterString.lower(`rpcUrl`),
                    FfiConverterOptionalString.lower(`httpRelayerUrl`),
                    _status,
                )
            }
        }.let {
            FfiConverterTypeSmartAccountBuilder.lift(it)
        }

    @Throws(
        SmartAccountException::class,
        )
    override fun `addEmailGuardianKey`(`emailAddress`: String, `pepper`: String, `roleWeight`: RoleWeight): SmartAccountBuilder =
        callWithPointer {
            rustCallWithError(SmartAccountException) { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccountbuilder_add_email_guardian_key(
                    it,
                    FfiConverterString.lower(`emailAddress`),
                    FfiConverterString.lower(`pepper`),
                    FfiConverterTypeRoleWeight.lower(`roleWeight`),
                    _status,
                )
            }
        }.let {
            FfiConverterTypeSmartAccountBuilder.lift(it)
        }

    @Throws(
        SmartAccountException::class,
        )
    override fun `addGuardianKeys`(`keys`: List<Key>): SmartAccountBuilder =
        callWithPointer {
            rustCallWithError(SmartAccountException) { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccountbuilder_add_guardian_keys(
                    it,
                    FfiConverterSequenceTypeKey.lower(`keys`),
                    _status,
                )
            }
        }.let {
            FfiConverterTypeSmartAccountBuilder.lift(it)
        }

    @Throws(
        SmartAccountException::class,
        )
    override fun `addOpenIdGuardianKey`(`idToken`: String, `roleWeight`: RoleWeight): SmartAccountBuilder =
        callWithPointer {
            rustCallWithError(SmartAccountException) { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccountbuilder_add_open_id_guardian_key(
                    it,
                    FfiConverterString.lower(`idToken`),
                    FfiConverterTypeRoleWeight.lower(`roleWeight`),
                    _status,
                )
            }
        }.let {
            FfiConverterTypeSmartAccountBuilder.lift(it)
        }

    @Throws(
        SmartAccountException::class,
        )
    override fun `addOpenIdWithEmailGuardianKey`(`idToken`: String, `emailAddress`: String, `roleWeight`: RoleWeight): SmartAccountBuilder =
        callWithPointer {
            rustCallWithError(SmartAccountException) { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccountbuilder_add_open_id_with_email_guardian_key(
                    it,
                    FfiConverterString.lower(`idToken`),
                    FfiConverterString.lower(`emailAddress`),
                    FfiConverterTypeRoleWeight.lower(`roleWeight`),
                    _status,
                )
            }
        }.let {
            FfiConverterTypeSmartAccountBuilder.lift(it)
        }

    @Throws(SmartAccountException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `build`(): SmartAccount {
        // Create a new `CoroutineScope` for this operation, suspend the coroutine, and call the
        // scaffolding function, passing it one of the callback handlers from `AsyncTypes.kt`.
        //
        // Make sure to retain a reference to the callback handler to ensure that it's not GCed before
        // it's invoked
        var callbackHolder: UniFfiFutureCallbackHandlerTypeSmartAccount_TypeSmartAccountError? = null
        return coroutineScope {
            val scope = this
            return@coroutineScope suspendCoroutine { continuation ->
                try {
                    val callback = UniFfiFutureCallbackHandlerTypeSmartAccount_TypeSmartAccountError(continuation)
                    callbackHolder = callback
                    callWithPointer { thisPtr ->
                        rustCall { status ->
                            _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccountbuilder_build(
                                thisPtr,

                                FfiConverterForeignExecutor.lower(scope),
                                callback,
                                USize(0),
                                status,
                            )
                        }
                    }
                } catch (e: Exception) {
                    continuation.resumeWithException(e)
                }
            }
        }
    }
    override fun `withActiveChain`(`activeChain`: ULong): SmartAccountBuilder =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccountbuilder_with_active_chain(
                    it,
                    FfiConverterULong.lower(`activeChain`),
                    _status,
                )
            }
        }.let {
            FfiConverterTypeSmartAccountBuilder.lift(it)
        }

    override fun `withAppId`(`appId`: String): SmartAccountBuilder =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccountbuilder_with_app_id(
                    it,
                    FfiConverterString.lower(`appId`),
                    _status,
                )
            }
        }.let {
            FfiConverterTypeSmartAccountBuilder.lift(it)
        }

    @Throws(
        SmartAccountException::class,
        )
    override fun `withKeysetJson`(`keysetJson`: String): SmartAccountBuilder =
        callWithPointer {
            rustCallWithError(SmartAccountException) { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccountbuilder_with_keyset_json(
                    it,
                    FfiConverterString.lower(`keysetJson`),
                    _status,
                )
            }
        }.let {
            FfiConverterTypeSmartAccountBuilder.lift(it)
        }

    @Throws(
        SmartAccountException::class,
        )
    override fun `withMasterKey`(`key`: Key): SmartAccountBuilder =
        callWithPointer {
            rustCallWithError(SmartAccountException) { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccountbuilder_with_master_key(
                    it,
                    FfiConverterTypeKey.lower(`key`),
                    _status,
                )
            }
        }.let {
            FfiConverterTypeSmartAccountBuilder.lift(it)
        }

    override fun `withMasterKeySigner`(`signer`: Signer, `roleWeight`: RoleWeight?): SmartAccountBuilder =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccountbuilder_with_master_key_signer(
                    it,
                    FfiConverterTypeSigner.lower(`signer`),
                    FfiConverterOptionalTypeRoleWeight.lower(`roleWeight`),
                    _status,
                )
            }
        }.let {
            FfiConverterTypeSmartAccountBuilder.lift(it)
        }

    override fun `withUnipassServerUrl`(`unipassServerUrl`: String): SmartAccountBuilder =
        callWithPointer {
            rustCall() { _status ->
                _UniFFILib.INSTANCE.uniffi_shared_fn_method_smartaccountbuilder_with_unipass_server_url(
                    it,
                    FfiConverterString.lower(`unipassServerUrl`),
                    _status,
                )
            }
        }.let {
            FfiConverterTypeSmartAccountBuilder.lift(it)
        }
}

public object FfiConverterTypeSmartAccountBuilder : FfiConverter<SmartAccountBuilder, Pointer> {
    override fun lower(value: SmartAccountBuilder): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): SmartAccountBuilder {
        return SmartAccountBuilder(value)
    }

    override fun read(buf: ByteBuffer): SmartAccountBuilder {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: SmartAccountBuilder) = 8

    override fun write(value: SmartAccountBuilder, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

// Callback function to execute a Rust task.  The Kotlin code schedules these in a coroutine then
// invokes them.
internal interface UniFfiRustTaskCallback : com.sun.jna.Callback {
    fun invoke(rustTaskData: Pointer?)
}

object UniFfiForeignExecutorCallback : com.sun.jna.Callback {
    internal fun invoke(handle: USize, delayMs: Int, rustTask: UniFfiRustTaskCallback?, rustTaskData: Pointer?) {
        if (rustTask == null) {
            FfiConverterForeignExecutor.drop(handle)
        } else {
            val coroutineScope = FfiConverterForeignExecutor.lift(handle)
            coroutineScope.launch {
                if (delayMs > 0) {
                    delay(delayMs.toLong())
                }
                rustTask.invoke(rustTaskData)
            }
        }
    }
}

public object FfiConverterForeignExecutor : FfiConverter<CoroutineScope, USize> {
    internal val handleMap = UniFfiHandleMap<CoroutineScope>()

    internal fun drop(handle: USize) {
        handleMap.remove(handle)
    }

    internal fun register(lib: _UniFFILib) {
        lib.uniffi_foreign_executor_callback_set(UniFfiForeignExecutorCallback)
    }

    // Number of live handles, exposed so we can test the memory management
    public fun handleCount(): Int {
        return handleMap.size
    }

    override fun allocationSize(value: CoroutineScope) = USize.size

    override fun lift(value: USize): CoroutineScope {
        return handleMap.get(value) ?: throw RuntimeException("unknown handle in FfiConverterForeignExecutor.lift")
    }

    override fun read(buf: ByteBuffer): CoroutineScope {
        return lift(USize.readFromBuffer(buf))
    }

    override fun lower(value: CoroutineScope): USize {
        return handleMap.insert(value)
    }

    override fun write(value: CoroutineScope, buf: ByteBuffer) {
        lower(value).writeToBuffer(buf)
    }
}

data class Eip712Domain(
    var `name`: String?,
    var `version`: String?,
    var `chainId`: ULong?,
    var `verifyingContract`: String?,
    var `salt`: String?,
)

public object FfiConverterTypeEIP712Domain : FfiConverterRustBuffer<Eip712Domain> {
    override fun read(buf: ByteBuffer): Eip712Domain {
        return Eip712Domain(
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: Eip712Domain) = (
        FfiConverterOptionalString.allocationSize(value.`name`) +
            FfiConverterOptionalString.allocationSize(value.`version`) +
            FfiConverterOptionalULong.allocationSize(value.`chainId`) +
            FfiConverterOptionalString.allocationSize(value.`verifyingContract`) +
            FfiConverterOptionalString.allocationSize(value.`salt`)
        )

    override fun write(value: Eip712Domain, buf: ByteBuffer) {
        FfiConverterOptionalString.write(value.`name`, buf)
        FfiConverterOptionalString.write(value.`version`, buf)
        FfiConverterOptionalULong.write(value.`chainId`, buf)
        FfiConverterOptionalString.write(value.`verifyingContract`, buf)
        FfiConverterOptionalString.write(value.`salt`, buf)
    }
}

data class Eip712DomainType(
    var `name`: String,
    var `type`: String,
)

public object FfiConverterTypeEip712DomainType : FfiConverterRustBuffer<Eip712DomainType> {
    override fun read(buf: ByteBuffer): Eip712DomainType {
        return Eip712DomainType(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Eip712DomainType) = (
        FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`type`)
        )

    override fun write(value: Eip712DomainType, buf: ByteBuffer) {
        FfiConverterString.write(value.`name`, buf)
        FfiConverterString.write(value.`type`, buf)
    }
}

data class FeeOption(
    var `token`: String,
    var `name`: String,
    var `symbol`: String,
    var `decimals`: UByte,
    var `to`: String,
    var `amount`: String,
    var `error`: String?,
)

public object FfiConverterTypeFeeOption : FfiConverterRustBuffer<FeeOption> {
    override fun read(buf: ByteBuffer): FeeOption {
        return FeeOption(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: FeeOption) = (
        FfiConverterString.allocationSize(value.`token`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`symbol`) +
            FfiConverterUByte.allocationSize(value.`decimals`) +
            FfiConverterString.allocationSize(value.`to`) +
            FfiConverterString.allocationSize(value.`amount`) +
            FfiConverterOptionalString.allocationSize(value.`error`)
        )

    override fun write(value: FeeOption, buf: ByteBuffer) {
        FfiConverterString.write(value.`token`, buf)
        FfiConverterString.write(value.`name`, buf)
        FfiConverterString.write(value.`symbol`, buf)
        FfiConverterUByte.write(value.`decimals`, buf)
        FfiConverterString.write(value.`to`, buf)
        FfiConverterString.write(value.`amount`, buf)
        FfiConverterOptionalString.write(value.`error`, buf)
    }
}

data class Log(
    var `address`: String,
    var `topics`: List<String>,
    var `data`: String,
    var `blockHash`: String?,
    var `blockNumber`: ULong?,
    var `transactionHash`: String?,
    var `transactionIndex`: ULong?,
    var `logIndex`: String?,
    var `transactionLogIndex`: String?,
    var `logType`: String?,
    var `removed`: Boolean?,
)

public object FfiConverterTypeLog : FfiConverterRustBuffer<Log> {
    override fun read(buf: ByteBuffer): Log {
        return Log(
            FfiConverterString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalBoolean.read(buf),
        )
    }

    override fun allocationSize(value: Log) = (
        FfiConverterString.allocationSize(value.`address`) +
            FfiConverterSequenceString.allocationSize(value.`topics`) +
            FfiConverterString.allocationSize(value.`data`) +
            FfiConverterOptionalString.allocationSize(value.`blockHash`) +
            FfiConverterOptionalULong.allocationSize(value.`blockNumber`) +
            FfiConverterOptionalString.allocationSize(value.`transactionHash`) +
            FfiConverterOptionalULong.allocationSize(value.`transactionIndex`) +
            FfiConverterOptionalString.allocationSize(value.`logIndex`) +
            FfiConverterOptionalString.allocationSize(value.`transactionLogIndex`) +
            FfiConverterOptionalString.allocationSize(value.`logType`) +
            FfiConverterOptionalBoolean.allocationSize(value.`removed`)
        )

    override fun write(value: Log, buf: ByteBuffer) {
        FfiConverterString.write(value.`address`, buf)
        FfiConverterSequenceString.write(value.`topics`, buf)
        FfiConverterString.write(value.`data`, buf)
        FfiConverterOptionalString.write(value.`blockHash`, buf)
        FfiConverterOptionalULong.write(value.`blockNumber`, buf)
        FfiConverterOptionalString.write(value.`transactionHash`, buf)
        FfiConverterOptionalULong.write(value.`transactionIndex`, buf)
        FfiConverterOptionalString.write(value.`logIndex`, buf)
        FfiConverterOptionalString.write(value.`transactionLogIndex`, buf)
        FfiConverterOptionalString.write(value.`logType`, buf)
        FfiConverterOptionalBoolean.write(value.`removed`, buf)
    }
}

data class RoleWeight(
    var `ownerRoleWeight`: UInt,
    var `assetsopRoleWeight`: UInt,
    var `guardianRoleWeight`: UInt,
)

public object FfiConverterTypeRoleWeight : FfiConverterRustBuffer<RoleWeight> {
    override fun read(buf: ByteBuffer): RoleWeight {
        return RoleWeight(
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: RoleWeight) = (
        FfiConverterUInt.allocationSize(value.`ownerRoleWeight`) +
            FfiConverterUInt.allocationSize(value.`assetsopRoleWeight`) +
            FfiConverterUInt.allocationSize(value.`guardianRoleWeight`)
        )

    override fun write(value: RoleWeight, buf: ByteBuffer) {
        FfiConverterUInt.write(value.`ownerRoleWeight`, buf)
        FfiConverterUInt.write(value.`assetsopRoleWeight`, buf)
        FfiConverterUInt.write(value.`guardianRoleWeight`, buf)
    }
}

data class SendingTransactionOptions(
    var `fee`: FeeOption?,
)

public object FfiConverterTypeSendingTransactionOptions : FfiConverterRustBuffer<SendingTransactionOptions> {
    override fun read(buf: ByteBuffer): SendingTransactionOptions {
        return SendingTransactionOptions(
            FfiConverterOptionalTypeFeeOption.read(buf),
        )
    }

    override fun allocationSize(value: SendingTransactionOptions) = (
        FfiConverterOptionalTypeFeeOption.allocationSize(value.`fee`)
        )

    override fun write(value: SendingTransactionOptions, buf: ByteBuffer) {
        FfiConverterOptionalTypeFeeOption.write(value.`fee`, buf)
    }
}

data class SimulateResult(
    var `isFeeRequired`: Boolean,
    var `feeOptions`: List<FeeOption>,
)

public object FfiConverterTypeSimulateResult : FfiConverterRustBuffer<SimulateResult> {
    override fun read(buf: ByteBuffer): SimulateResult {
        return SimulateResult(
            FfiConverterBoolean.read(buf),
            FfiConverterSequenceTypeFeeOption.read(buf),
        )
    }

    override fun allocationSize(value: SimulateResult) = (
        FfiConverterBoolean.allocationSize(value.`isFeeRequired`) +
            FfiConverterSequenceTypeFeeOption.allocationSize(value.`feeOptions`)
        )

    override fun write(value: SimulateResult, buf: ByteBuffer) {
        FfiConverterBoolean.write(value.`isFeeRequired`, buf)
        FfiConverterSequenceTypeFeeOption.write(value.`feeOptions`, buf)
    }
}

data class SimulateTransactionOptions(
    var `token`: String?,
)

public object FfiConverterTypeSimulateTransactionOptions : FfiConverterRustBuffer<SimulateTransactionOptions> {
    override fun read(buf: ByteBuffer): SimulateTransactionOptions {
        return SimulateTransactionOptions(
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: SimulateTransactionOptions) = (
        FfiConverterOptionalString.allocationSize(value.`token`)
        )

    override fun write(value: SimulateTransactionOptions, buf: ByteBuffer) {
        FfiConverterOptionalString.write(value.`token`, buf)
    }
}

data class Transaction(
    var `to`: String,
    var `data`: String,
    var `value`: String,
)

public object FfiConverterTypeTransaction : FfiConverterRustBuffer<Transaction> {
    override fun read(buf: ByteBuffer): Transaction {
        return Transaction(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Transaction) = (
        FfiConverterString.allocationSize(value.`to`) +
            FfiConverterString.allocationSize(value.`data`) +
            FfiConverterString.allocationSize(value.`value`)
        )

    override fun write(value: Transaction, buf: ByteBuffer) {
        FfiConverterString.write(value.`to`, buf)
        FfiConverterString.write(value.`data`, buf)
        FfiConverterString.write(value.`value`, buf)
    }
}

data class TransactionReceipt(
    var `transactionHash`: String,
    var `transactionIndex`: ULong,
    var `blockHash`: String?,
    var `blockNumber`: ULong?,
    var `from`: String,
    var `to`: String?,
    var `cumulativeGasUsed`: String,
    var `gasUsed`: String?,
    var `contractAddress`: String?,
    var `logs`: List<Log>,
    var `status`: ULong?,
    var `root`: String?,
    var `transactionType`: ULong?,
    var `effectiveGasPrice`: String?,
)

public object FfiConverterTypeTransactionReceipt : FfiConverterRustBuffer<TransactionReceipt> {
    override fun read(buf: ByteBuffer): TransactionReceipt {
        return TransactionReceipt(
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterSequenceTypeLog.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: TransactionReceipt) = (
        FfiConverterString.allocationSize(value.`transactionHash`) +
            FfiConverterULong.allocationSize(value.`transactionIndex`) +
            FfiConverterOptionalString.allocationSize(value.`blockHash`) +
            FfiConverterOptionalULong.allocationSize(value.`blockNumber`) +
            FfiConverterString.allocationSize(value.`from`) +
            FfiConverterOptionalString.allocationSize(value.`to`) +
            FfiConverterString.allocationSize(value.`cumulativeGasUsed`) +
            FfiConverterOptionalString.allocationSize(value.`gasUsed`) +
            FfiConverterOptionalString.allocationSize(value.`contractAddress`) +
            FfiConverterSequenceTypeLog.allocationSize(value.`logs`) +
            FfiConverterOptionalULong.allocationSize(value.`status`) +
            FfiConverterOptionalString.allocationSize(value.`root`) +
            FfiConverterOptionalULong.allocationSize(value.`transactionType`) +
            FfiConverterOptionalString.allocationSize(value.`effectiveGasPrice`)
        )

    override fun write(value: TransactionReceipt, buf: ByteBuffer) {
        FfiConverterString.write(value.`transactionHash`, buf)
        FfiConverterULong.write(value.`transactionIndex`, buf)
        FfiConverterOptionalString.write(value.`blockHash`, buf)
        FfiConverterOptionalULong.write(value.`blockNumber`, buf)
        FfiConverterString.write(value.`from`, buf)
        FfiConverterOptionalString.write(value.`to`, buf)
        FfiConverterString.write(value.`cumulativeGasUsed`, buf)
        FfiConverterOptionalString.write(value.`gasUsed`, buf)
        FfiConverterOptionalString.write(value.`contractAddress`, buf)
        FfiConverterSequenceTypeLog.write(value.`logs`, buf)
        FfiConverterOptionalULong.write(value.`status`, buf)
        FfiConverterOptionalString.write(value.`root`, buf)
        FfiConverterOptionalULong.write(value.`transactionType`, buf)
        FfiConverterOptionalString.write(value.`effectiveGasPrice`, buf)
    }
}

data class TypedData(
    var `domain`: Eip712Domain,
    var `types`: Map<String, List<Eip712DomainType>>,
    var `primaryType`: String,
    var `message`: Map<String, Value>,
)

public object FfiConverterTypeTypedData : FfiConverterRustBuffer<TypedData> {
    override fun read(buf: ByteBuffer): TypedData {
        return TypedData(
            FfiConverterTypeEIP712Domain.read(buf),
            FfiConverterMapStringSequenceTypeEip712DomainType.read(buf),
            FfiConverterString.read(buf),
            FfiConverterMapStringTypeValue.read(buf),
        )
    }

    override fun allocationSize(value: TypedData) = (
        FfiConverterTypeEIP712Domain.allocationSize(value.`domain`) +
            FfiConverterMapStringSequenceTypeEip712DomainType.allocationSize(value.`types`) +
            FfiConverterString.allocationSize(value.`primaryType`) +
            FfiConverterMapStringTypeValue.allocationSize(value.`message`)
        )

    override fun write(value: TypedData, buf: ByteBuffer) {
        FfiConverterTypeEIP712Domain.write(value.`domain`, buf)
        FfiConverterMapStringSequenceTypeEip712DomainType.write(value.`types`, buf)
        FfiConverterString.write(value.`primaryType`, buf)
        FfiConverterMapStringTypeValue.write(value.`message`, buf)
    }
}

sealed class Key {
    data class EoaSigner(
        val `signer`: Signer,
        val `roleWeight`: RoleWeight,
    ) : Key()
    data class KeyEmail(
        val `emailAddress`: String,
        val `roleWeight`: RoleWeight,
    ) : Key()
    data class KeyOpenId(
        val `idToken`: String,
        val `roleWeight`: RoleWeight,
    ) : Key()
    data class KeyOpenIdWithEmail(
        val `idToken`: String,
        val `emailAddress`: String,
        val `roleWeight`: RoleWeight,
    ) : Key()
}

public object FfiConverterTypeKey : FfiConverterRustBuffer<Key> {
    override fun read(buf: ByteBuffer): Key {
        return when (buf.getInt()) {
            1 -> Key.EoaSigner(
                FfiConverterTypeSigner.read(buf),
                FfiConverterTypeRoleWeight.read(buf),
            )
            2 -> Key.KeyEmail(
                FfiConverterString.read(buf),
                FfiConverterTypeRoleWeight.read(buf),
            )
            3 -> Key.KeyOpenId(
                FfiConverterString.read(buf),
                FfiConverterTypeRoleWeight.read(buf),
            )
            4 -> Key.KeyOpenIdWithEmail(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterTypeRoleWeight.read(buf),
            )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Key) = when (value) {
        is Key.EoaSigner -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterTypeSigner.allocationSize(value.`signer`) +
                    FfiConverterTypeRoleWeight.allocationSize(value.`roleWeight`)
                )
        }
        is Key.KeyEmail -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.`emailAddress`) +
                    FfiConverterTypeRoleWeight.allocationSize(value.`roleWeight`)
                )
        }
        is Key.KeyOpenId -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.`idToken`) +
                    FfiConverterTypeRoleWeight.allocationSize(value.`roleWeight`)
                )
        }
        is Key.KeyOpenIdWithEmail -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.`idToken`) +
                    FfiConverterString.allocationSize(value.`emailAddress`) +
                    FfiConverterTypeRoleWeight.allocationSize(value.`roleWeight`)
                )
        }
    }

    override fun write(value: Key, buf: ByteBuffer) {
        when (value) {
            is Key.EoaSigner -> {
                buf.putInt(1)
                FfiConverterTypeSigner.write(value.`signer`, buf)
                FfiConverterTypeRoleWeight.write(value.`roleWeight`, buf)
                Unit
            }
            is Key.KeyEmail -> {
                buf.putInt(2)
                FfiConverterString.write(value.`emailAddress`, buf)
                FfiConverterTypeRoleWeight.write(value.`roleWeight`, buf)
                Unit
            }
            is Key.KeyOpenId -> {
                buf.putInt(3)
                FfiConverterString.write(value.`idToken`, buf)
                FfiConverterTypeRoleWeight.write(value.`roleWeight`, buf)
                Unit
            }
            is Key.KeyOpenIdWithEmail -> {
                buf.putInt(4)
                FfiConverterString.write(value.`idToken`, buf)
                FfiConverterString.write(value.`emailAddress`, buf)
                FfiConverterTypeRoleWeight.write(value.`roleWeight`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

sealed class SignerException(message: String) : Exception(message) {
    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.
    class InnerSignerException(message: String) : SignerException(message)
    class UnexpectedException(message: String) : SignerException(message)
    class Eip712Exception(message: String) : SignerException(message)
    class EthersEip712Exception(message: String) : SignerException(message)
    class OpenIdWithEmailException(message: String) : SignerException(message)
    class NotSupportSign(message: String) : SignerException(message)

    companion object ErrorHandler : CallStatusErrorHandler<SignerException> {
        override fun lift(error_buf: RustBuffer.ByValue): SignerException = FfiConverterTypeSignerError.lift(error_buf)
    }
}

public object FfiConverterTypeSignerError : FfiConverterRustBuffer<SignerException> {
    override fun read(buf: ByteBuffer): SignerException {
        return when (buf.getInt()) {
            1 -> SignerException.InnerSignerException(FfiConverterString.read(buf))
            2 -> SignerException.UnexpectedException(FfiConverterString.read(buf))
            3 -> SignerException.Eip712Exception(FfiConverterString.read(buf))
            4 -> SignerException.EthersEip712Exception(FfiConverterString.read(buf))
            5 -> SignerException.OpenIdWithEmailException(FfiConverterString.read(buf))
            6 -> SignerException.NotSupportSign(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: SignerException): Int {
        return 4
    }

    override fun write(value: SignerException, buf: ByteBuffer) {
        when (value) {
            is SignerException.InnerSignerException -> {
                buf.putInt(1)
                Unit
            }
            is SignerException.UnexpectedException -> {
                buf.putInt(2)
                Unit
            }
            is SignerException.Eip712Exception -> {
                buf.putInt(3)
                Unit
            }
            is SignerException.EthersEip712Exception -> {
                buf.putInt(4)
                Unit
            }
            is SignerException.OpenIdWithEmailException -> {
                buf.putInt(5)
                Unit
            }
            is SignerException.NotSupportSign -> {
                buf.putInt(6)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

sealed class SmartAccountException(message: String) : Exception(message) {
    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.
    class ParseChainException(message: String) : SmartAccountException(message)
    class CustomAuthSmartAccountException(message: String) : SmartAccountException(message)
    class SmartAccountBuilderException(message: String) : SmartAccountException(message)
    class InvalidHash(message: String) : SmartAccountException(message)
    class InvalidBuilder(message: String) : SmartAccountException(message)
    class UnexpectedException(message: String) : SmartAccountException(message)
    class TypeParseException(message: String) : SmartAccountException(message)
    class HttpRelayerClientException(message: String) : SmartAccountException(message)
    class Eip712Exception(message: String) : SmartAccountException(message)

    companion object ErrorHandler : CallStatusErrorHandler<SmartAccountException> {
        override fun lift(error_buf: RustBuffer.ByValue): SmartAccountException = FfiConverterTypeSmartAccountError.lift(error_buf)
    }
}

public object FfiConverterTypeSmartAccountError : FfiConverterRustBuffer<SmartAccountException> {
    override fun read(buf: ByteBuffer): SmartAccountException {
        return when (buf.getInt()) {
            1 -> SmartAccountException.ParseChainException(FfiConverterString.read(buf))
            2 -> SmartAccountException.CustomAuthSmartAccountException(FfiConverterString.read(buf))
            3 -> SmartAccountException.SmartAccountBuilderException(FfiConverterString.read(buf))
            4 -> SmartAccountException.InvalidHash(FfiConverterString.read(buf))
            5 -> SmartAccountException.InvalidBuilder(FfiConverterString.read(buf))
            6 -> SmartAccountException.UnexpectedException(FfiConverterString.read(buf))
            7 -> SmartAccountException.TypeParseException(FfiConverterString.read(buf))
            8 -> SmartAccountException.HttpRelayerClientException(FfiConverterString.read(buf))
            9 -> SmartAccountException.Eip712Exception(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: SmartAccountException): Int {
        return 4
    }

    override fun write(value: SmartAccountException, buf: ByteBuffer) {
        when (value) {
            is SmartAccountException.ParseChainException -> {
                buf.putInt(1)
                Unit
            }
            is SmartAccountException.CustomAuthSmartAccountException -> {
                buf.putInt(2)
                Unit
            }
            is SmartAccountException.SmartAccountBuilderException -> {
                buf.putInt(3)
                Unit
            }
            is SmartAccountException.InvalidHash -> {
                buf.putInt(4)
                Unit
            }
            is SmartAccountException.InvalidBuilder -> {
                buf.putInt(5)
                Unit
            }
            is SmartAccountException.UnexpectedException -> {
                buf.putInt(6)
                Unit
            }
            is SmartAccountException.TypeParseException -> {
                buf.putInt(7)
                Unit
            }
            is SmartAccountException.HttpRelayerClientException -> {
                buf.putInt(8)
                Unit
            }
            is SmartAccountException.Eip712Exception -> {
                buf.putInt(9)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

sealed class Value {
    object NullValue : Value()

    data class BoolValue(
        val `inner`: Boolean,
    ) : Value()
    data class NumberValue(
        val `inner`: Double,
    ) : Value()
    data class StringValue(
        val `inner`: String,
    ) : Value()
    data class ArrayValue(
        val `inner`: List<Value>,
    ) : Value()
    data class ObjectValue(
        val `inner`: Map<String, Value>,
    ) : Value()
}

public object FfiConverterTypeValue : FfiConverterRustBuffer<Value> {
    override fun read(buf: ByteBuffer): Value {
        return when (buf.getInt()) {
            1 -> Value.NullValue
            2 -> Value.BoolValue(
                FfiConverterBoolean.read(buf),
            )
            3 -> Value.NumberValue(
                FfiConverterDouble.read(buf),
            )
            4 -> Value.StringValue(
                FfiConverterString.read(buf),
            )
            5 -> Value.ArrayValue(
                FfiConverterSequenceTypeValue.read(buf),
            )
            6 -> Value.ObjectValue(
                FfiConverterMapStringTypeValue.read(buf),
            )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Value) = when (value) {
        is Value.NullValue -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                )
        }
        is Value.BoolValue -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterBoolean.allocationSize(value.`inner`)
                )
        }
        is Value.NumberValue -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterDouble.allocationSize(value.`inner`)
                )
        }
        is Value.StringValue -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterString.allocationSize(value.`inner`)
                )
        }
        is Value.ArrayValue -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterSequenceTypeValue.allocationSize(value.`inner`)
                )
        }
        is Value.ObjectValue -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4 +
                    FfiConverterMapStringTypeValue.allocationSize(value.`inner`)
                )
        }
    }

    override fun write(value: Value, buf: ByteBuffer) {
        when (value) {
            is Value.NullValue -> {
                buf.putInt(1)
                Unit
            }
            is Value.BoolValue -> {
                buf.putInt(2)
                FfiConverterBoolean.write(value.`inner`, buf)
                Unit
            }
            is Value.NumberValue -> {
                buf.putInt(3)
                FfiConverterDouble.write(value.`inner`, buf)
                Unit
            }
            is Value.StringValue -> {
                buf.putInt(4)
                FfiConverterString.write(value.`inner`, buf)
                Unit
            }
            is Value.ArrayValue -> {
                buf.putInt(5)
                FfiConverterSequenceTypeValue.write(value.`inner`, buf)
                Unit
            }
            is Value.ObjectValue -> {
                buf.putInt(6)
                FfiConverterMapStringTypeValue.write(value.`inner`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

internal typealias Handle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<Handle, T> = mutableMapOf(),
    private val rightMap: MutableMap<T, Handle> = mutableMapOf(),
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): Handle =
        lock.withLock {
            rightMap[obj]
                ?: currentHandle.getAndAdd(stride)
                    .also { handle ->
                        leftMap[handle] = obj
                        rightMap[obj] = handle
                    }
        }

    fun get(handle: Handle) = lock.withLock {
        leftMap[handle]
    }

    fun delete(handle: Handle) {
        this.remove(handle)
    }

    fun remove(handle: Handle): T? =
        lock.withLock {
            leftMap.remove(handle)?.let { obj ->
                rightMap.remove(obj)
                obj
            }
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun invoke(handle: Handle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0

// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

public abstract class FfiConverterCallbackInterface<CallbackInterface>(
    protected val foreignCallback: ForeignCallback,
) : FfiConverter<CallbackInterface, Handle> {
    private val handleMap = ConcurrentHandleMap<CallbackInterface>()

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal abstract fun register(lib: _UniFFILib)

    fun drop(handle: Handle): RustBuffer.ByValue {
        return handleMap.remove(handle).let { RustBuffer.ByValue() }
    }

    override fun lift(value: Handle): CallbackInterface {
        return handleMap.get(value) ?: throw InternalException("No callback in handlemap; this is a Uniffi bug")
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) =
        handleMap.insert(value).also {
            assert(handleMap.get(it) === value) { "Handle map is not returning the object we just placed there. This is a bug in the HandleMap." }
        }

    override fun allocationSize(value: CallbackInterface) = 8

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Declaration and FfiConverters for Signer Callback Interface

public interface Signer {
    fun `address`(): String
    fun `signMessage`(`message`: List<UByte>): String
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeSigner : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeSigner.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeSigner.drop(handle)
                // Successful return
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                UNIFFI_CALLBACK_SUCCESS
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeAddress`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            2 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeSignMessage`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }

            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        }
    }

    @Suppress("UNUSED_PARAMETER")
    private fun `invokeAddress`(kotlinCallbackInterface: Signer, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        fun makeCall(): Int {
            val returnValue = kotlinCallbackInterface.`address`()
            outBuf.setValue(FfiConverterString.lowerIntoRustBuffer(returnValue))
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError(): Int = makeCall()

        return makeCallAndHandleError()
    }

    @Suppress("UNUSED_PARAMETER")
    private fun `invokeSignMessage`(kotlinCallbackInterface: Signer, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall(): Int {
            val returnValue = kotlinCallbackInterface.`signMessage`(
                FfiConverterSequenceUByte.read(argsBuf),

            )
            outBuf.setValue(FfiConverterString.lowerIntoRustBuffer(returnValue))
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError(): Int = try {
            makeCall()
        } catch (e: SignerException) {
            // Expected error, serialize it into outBuf
            outBuf.setValue(FfiConverterTypeSignerError.lowerIntoRustBuffer(e))
            UNIFFI_CALLBACK_ERROR
        }

        return makeCallAndHandleError()
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeSigner : FfiConverterCallbackInterface<Signer>(
    foreignCallback = ForeignCallbackTypeSigner(),
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.uniffi_shared_fn_init_callback_signer(this.foreignCallback, status)
        }
    }
}

public object FfiConverterOptionalULong : FfiConverterRustBuffer<ULong?> {
    override fun read(buf: ByteBuffer): ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: ULong?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}

public object FfiConverterOptionalBoolean : FfiConverterRustBuffer<Boolean?> {
    override fun read(buf: ByteBuffer): Boolean? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterBoolean.read(buf)
    }

    override fun allocationSize(value: Boolean?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterBoolean.allocationSize(value)
        }
    }

    override fun write(value: Boolean?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterBoolean.write(value, buf)
        }
    }
}

public object FfiConverterOptionalString : FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeFeeOption : FfiConverterRustBuffer<FeeOption?> {
    override fun read(buf: ByteBuffer): FeeOption? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFeeOption.read(buf)
    }

    override fun allocationSize(value: FeeOption?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeFeeOption.allocationSize(value)
        }
    }

    override fun write(value: FeeOption?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFeeOption.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeRoleWeight : FfiConverterRustBuffer<RoleWeight?> {
    override fun read(buf: ByteBuffer): RoleWeight? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeRoleWeight.read(buf)
    }

    override fun allocationSize(value: RoleWeight?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeRoleWeight.allocationSize(value)
        }
    }

    override fun write(value: RoleWeight?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeRoleWeight.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeSendingTransactionOptions : FfiConverterRustBuffer<SendingTransactionOptions?> {
    override fun read(buf: ByteBuffer): SendingTransactionOptions? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSendingTransactionOptions.read(buf)
    }

    override fun allocationSize(value: SendingTransactionOptions?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeSendingTransactionOptions.allocationSize(value)
        }
    }

    override fun write(value: SendingTransactionOptions?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSendingTransactionOptions.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeSimulateTransactionOptions : FfiConverterRustBuffer<SimulateTransactionOptions?> {
    override fun read(buf: ByteBuffer): SimulateTransactionOptions? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSimulateTransactionOptions.read(buf)
    }

    override fun allocationSize(value: SimulateTransactionOptions?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeSimulateTransactionOptions.allocationSize(value)
        }
    }

    override fun write(value: SimulateTransactionOptions?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSimulateTransactionOptions.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeTransactionReceipt : FfiConverterRustBuffer<TransactionReceipt?> {
    override fun read(buf: ByteBuffer): TransactionReceipt? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeTransactionReceipt.read(buf)
    }

    override fun allocationSize(value: TransactionReceipt?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeTransactionReceipt.allocationSize(value)
        }
    }

    override fun write(value: TransactionReceipt?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeTransactionReceipt.write(value, buf)
        }
    }
}

public object FfiConverterSequenceUByte : FfiConverterRustBuffer<List<UByte>> {
    override fun read(buf: ByteBuffer): List<UByte> {
        val len = buf.getInt()
        return List<UByte>(len) {
            FfiConverterUByte.read(buf)
        }
    }

    override fun allocationSize(value: List<UByte>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterUByte.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<UByte>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterUByte.write(it, buf)
        }
    }
}

public object FfiConverterSequenceString : FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterString.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeEip712DomainType : FfiConverterRustBuffer<List<Eip712DomainType>> {
    override fun read(buf: ByteBuffer): List<Eip712DomainType> {
        val len = buf.getInt()
        return List<Eip712DomainType>(len) {
            FfiConverterTypeEip712DomainType.read(buf)
        }
    }

    override fun allocationSize(value: List<Eip712DomainType>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeEip712DomainType.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Eip712DomainType>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeEip712DomainType.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeFeeOption : FfiConverterRustBuffer<List<FeeOption>> {
    override fun read(buf: ByteBuffer): List<FeeOption> {
        val len = buf.getInt()
        return List<FeeOption>(len) {
            FfiConverterTypeFeeOption.read(buf)
        }
    }

    override fun allocationSize(value: List<FeeOption>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFeeOption.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FeeOption>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeFeeOption.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeLog : FfiConverterRustBuffer<List<Log>> {
    override fun read(buf: ByteBuffer): List<Log> {
        val len = buf.getInt()
        return List<Log>(len) {
            FfiConverterTypeLog.read(buf)
        }
    }

    override fun allocationSize(value: List<Log>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeLog.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Log>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeLog.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeTransaction : FfiConverterRustBuffer<List<Transaction>> {
    override fun read(buf: ByteBuffer): List<Transaction> {
        val len = buf.getInt()
        return List<Transaction>(len) {
            FfiConverterTypeTransaction.read(buf)
        }
    }

    override fun allocationSize(value: List<Transaction>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeTransaction.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Transaction>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeTransaction.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeKey : FfiConverterRustBuffer<List<Key>> {
    override fun read(buf: ByteBuffer): List<Key> {
        val len = buf.getInt()
        return List<Key>(len) {
            FfiConverterTypeKey.read(buf)
        }
    }

    override fun allocationSize(value: List<Key>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeKey.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Key>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeKey.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeValue : FfiConverterRustBuffer<List<Value>> {
    override fun read(buf: ByteBuffer): List<Value> {
        val len = buf.getInt()
        return List<Value>(len) {
            FfiConverterTypeValue.read(buf)
        }
    }

    override fun allocationSize(value: List<Value>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeValue.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Value>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeValue.write(it, buf)
        }
    }
}

public object FfiConverterMapStringTypeValue : FfiConverterRustBuffer<Map<String, Value>> {
    override fun read(buf: ByteBuffer): Map<String, Value> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items: MutableMap<String, Value> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterTypeValue.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, Value>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
                FfiConverterTypeValue.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, Value>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterTypeValue.write(v, buf)
        }
    }
}

public object FfiConverterMapStringSequenceTypeEip712DomainType : FfiConverterRustBuffer<Map<String, List<Eip712DomainType>>> {
    override fun read(buf: ByteBuffer): Map<String, List<Eip712DomainType>> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items: MutableMap<String, List<Eip712DomainType>> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterSequenceTypeEip712DomainType.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, List<Eip712DomainType>>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
                FfiConverterSequenceTypeEip712DomainType.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, List<Eip712DomainType>>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterSequenceTypeEip712DomainType.write(v, buf)
        }
    }
}
// Async return type handlers

// FFI type for callback handlers
internal interface UniFfiFutureCallbackByte : com.sun.jna.Callback {
    // Note: callbackData is always 0.  We could pass Rust a pointer/usize to represent the
    // continuation, but with JNA it's easier to just store it in the callback handler.
    fun invoke(_callbackData: USize, returnValue: Byte?, callStatus: RustCallStatus.ByValue)
}
internal interface UniFfiFutureCallbackLong : com.sun.jna.Callback {
    // Note: callbackData is always 0.  We could pass Rust a pointer/usize to represent the
    // continuation, but with JNA it's easier to just store it in the callback handler.
    fun invoke(_callbackData: USize, returnValue: Long?, callStatus: RustCallStatus.ByValue)
}
internal interface UniFfiFutureCallbackPointer : com.sun.jna.Callback {
    // Note: callbackData is always 0.  We could pass Rust a pointer/usize to represent the
    // continuation, but with JNA it's easier to just store it in the callback handler.
    fun invoke(_callbackData: USize, returnValue: Pointer?, callStatus: RustCallStatus.ByValue)
}
internal interface UniFfiFutureCallbackRustBuffer : com.sun.jna.Callback {
    // Note: callbackData is always 0.  We could pass Rust a pointer/usize to represent the
    // continuation, but with JNA it's easier to just store it in the callback handler.
    fun invoke(_callbackData: USize, returnValue: RustBuffer.ByValue?, callStatus: RustCallStatus.ByValue)
}

// Callback handlers for an async call.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.

internal class UniFfiFutureCallbackHandlerVoid_TypeSmartAccountError(val continuation: Continuation<Unit>) :
    UniFfiFutureCallbackByte {
    override fun invoke(_callbackData: USize, returnValue: Byte?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(SmartAccountException, callStatus)
            continuation.resume(Unit)
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerULong(val continuation: Continuation<ULong>) :
    UniFfiFutureCallbackLong {
    override fun invoke(_callbackData: USize, returnValue: Long?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(NullCallStatusErrorHandler, callStatus)
            continuation.resume(FfiConverterULong.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerULong_TypeSmartAccountError(val continuation: Continuation<ULong>) :
    UniFfiFutureCallbackLong {
    override fun invoke(_callbackData: USize, returnValue: Long?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(SmartAccountException, callStatus)
            continuation.resume(FfiConverterULong.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerBoolean_TypeSmartAccountError(val continuation: Continuation<Boolean>) :
    UniFfiFutureCallbackByte {
    override fun invoke(_callbackData: USize, returnValue: Byte?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(SmartAccountException, callStatus)
            continuation.resume(FfiConverterBoolean.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerString(val continuation: Continuation<String>) :
    UniFfiFutureCallbackRustBuffer {
    override fun invoke(_callbackData: USize, returnValue: RustBuffer.ByValue?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(NullCallStatusErrorHandler, callStatus)
            continuation.resume(FfiConverterString.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerString_TypeSmartAccountError(val continuation: Continuation<String>) :
    UniFfiFutureCallbackRustBuffer {
    override fun invoke(_callbackData: USize, returnValue: RustBuffer.ByValue?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(SmartAccountException, callStatus)
            continuation.resume(FfiConverterString.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerTypeSmartAccount_TypeSmartAccountError(val continuation: Continuation<SmartAccount>) :
    UniFfiFutureCallbackPointer {
    override fun invoke(_callbackData: USize, returnValue: Pointer?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(SmartAccountException, callStatus)
            continuation.resume(FfiConverterTypeSmartAccount.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerTypeSmartAccountBuilder(val continuation: Continuation<SmartAccountBuilder>) :
    UniFfiFutureCallbackPointer {
    override fun invoke(_callbackData: USize, returnValue: Pointer?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(NullCallStatusErrorHandler, callStatus)
            continuation.resume(FfiConverterTypeSmartAccountBuilder.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerTypeSmartAccountBuilder_TypeSmartAccountError(val continuation: Continuation<SmartAccountBuilder>) :
    UniFfiFutureCallbackPointer {
    override fun invoke(_callbackData: USize, returnValue: Pointer?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(SmartAccountException, callStatus)
            continuation.resume(FfiConverterTypeSmartAccountBuilder.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerTypeSimulateResult_TypeSmartAccountError(val continuation: Continuation<SimulateResult>) :
    UniFfiFutureCallbackRustBuffer {
    override fun invoke(_callbackData: USize, returnValue: RustBuffer.ByValue?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(SmartAccountException, callStatus)
            continuation.resume(FfiConverterTypeSimulateResult.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerOptionalTypeTransactionReceipt_TypeSmartAccountError(val continuation: Continuation<TransactionReceipt?>) :
    UniFfiFutureCallbackRustBuffer {
    override fun invoke(_callbackData: USize, returnValue: RustBuffer.ByValue?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(SmartAccountException, callStatus)
            continuation.resume(FfiConverterOptionalTypeTransactionReceipt.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerSequenceUByte(val continuation: Continuation<List<UByte>>) :
    UniFfiFutureCallbackRustBuffer {
    override fun invoke(_callbackData: USize, returnValue: RustBuffer.ByValue?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(NullCallStatusErrorHandler, callStatus)
            continuation.resume(FfiConverterSequenceUByte.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerSequenceUByte_TypeSmartAccountError(val continuation: Continuation<List<UByte>>) :
    UniFfiFutureCallbackRustBuffer {
    override fun invoke(_callbackData: USize, returnValue: RustBuffer.ByValue?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(SmartAccountException, callStatus)
            continuation.resume(FfiConverterSequenceUByte.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}
